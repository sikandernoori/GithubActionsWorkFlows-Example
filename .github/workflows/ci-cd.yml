name: "Flutter App -> Build(Android & IOS), Test(Firebase TestLab) & Release"
on: [push]
jobs:
  build-ios:
    name: Build IOS
    runs-on: macos-11
    env:
      flutter_version: 3.3.2
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.flutter_version }}
          channel: 'stable'
      - name: Setup Ruby (bundle)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: install pbxproj
        run: pip install pbxproj
      - name: Install the Apple certificate and provisioning profile
        env:
          P12_BASE64: ${{ secrets.P12_BASE64 }}
          MOBILEPROVISION_BASE64: ${{ secrets.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          P12_PASSWORD=""

          # import certificate and provisioning profile from secrets
          echo -n "$P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$MOBILEPROVISION_BASE64" | base64 --decode --output $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Get Flutter Pub
        run: flutter pub get
      - name: Restore Pods cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ios/Pods
            ~/Library/Caches/CocoaPods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      - name: Install Pods
        run: cd ios && pod install --repo-update && cd ..
      - name: setup for Manul code sign
        run: python code_sign.py ${{ secrets.TEAM_ID }} ${{ secrets.APPSTORE_ISSUER_ID }} ${{ secrets.MOBILEPROVISION_NAME }}
      - name: update export options for manual provisioning
        run:  /usr/libexec/PlistBuddy -c 'Add :provisioningProfiles:ee.randomforest.trackr string ${{ secrets.MOBILEPROVISION_NAME }}' ios/export-options.plist
      - name: create ipa
        run: flutter build ipa --export-options-plist=ios/export-options.plist --release --dart-define=TRACKR_GIT_COMMIT_DATE=$(git log -n1 --date=short --format="%ad") --dart-define=TRACKR_GIT_COMMIT_HASH=$(git log -n1 --date=short --format="%h") --dart-define=TRACKR_FLUTTER_VERSION=${{ env.flutter_version }}
      - name: upload ipa
        uses: actions/upload-artifact@v3
        with:
          name: ipa-production-release
          path: ./build/ios/ipa/app.ipa
  upload_testflight:
    name: TestFlight upload
    needs: build-ios
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: Download ipa
        uses: actions/download-artifact@v1
        with:
          name: ipa-production-release
      - name: Download ipa
        uses: xcrun altool --upload-app --type ios -f ./ipa-production-release/app.ipa --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}